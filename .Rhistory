(TotalAmountCredited > 1 &
TotalAmountCredited < 100)) %>%
ggplot(aes(x=StateAbbreviation, y=TotalAmountCredited)) +
geom_boxplot(aes(fill=StateAbbreviation)) + labs(x = "STATE", fill="STATE")
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(size=2)
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(shape=22, size=2)
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(size=2)
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(size=3)
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 0.1 & Cost < 2000) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point()
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 0.1 & Cost < 2000) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point() +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 0.1 & Cost < 2000) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point(aes(color=StateAbbreviation)) +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 1 & Cost < 6500) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
bmps %>%
dplyr::filter("covercrop"==stringr::str_sub(BMPShortName, 1, 9) &
(TotalAmountCredited > 1 &
TotalAmountCredited < 100)) %>%
ggplot(aes(x=StateAbbreviation, y=TotalAmountCredited)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(x = "STATE", fill="STATE",
title="TotalAmountCredited only for cover crop BMPs by STATE")
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(size=3) +
labs(title="Dams built by YEAR")
# Number of dams Removed by year
Removed_dams <-  dams %>% as_tibble() %>%
dplyr::select(-geometry) %>%
group_by(DamRemoval) %>%
summarise(removed_dams = n()) %>%
rbind(c(2018, 0), c(2019,0))  # Assuming that there will be no dams removed in 2018, 2019
Removed_dams <-  dams %>% as_tibble() %>%
dplyr::select(-geometry) %>%
group_by(DamRemoval) %>%
summarise(removed_dams = n()) %>%
rbind(c(2018, 0), c(2019,0))  # Assuming that there will be no dams removed in 2018, 2019
# Length of streams opened by year
Opened.stream.length <- streams %>% as_tibble() %>%
dplyr::select(-geometry) %>%
group_by(DamRemoval) %>%
summarise(Opened.stream.length = sum(LengthKM))
# Join two datasets.
DRSOBY <- left_join(
Removed_dams, Opened.stream.length, by="DamRemoval") %>%
rename(Year = DamRemoval)
# Graph.
library(grid)
max_ratio <- max(DRSOBY$Opened.stream.length)/max(DRSOBY$removed_dams); max_ratio
ggplot(DRSOBY, aes(x=Year)) +
geom_bar(aes(y=Opened.stream.length), fill="skyblue", stat="identity") +
geom_point(aes(y=removed_dams*max_ratio),
shape=22, size=5, color="black", bg="grey", stroke=3) +
theme_minimal() +
scale_x_continuous(breaks=c(2012:2019)) +
scale_y_continuous(sec.axis=sec_axis(~./max_ratio,
name="Number of Dams removed",
breaks=c(1:10))) +
labs(title="Streams opened following Dams removed by Year",
x= "Year(2012-2019)", y="Streams opened(Km)") +
theme(title = element_text(size= 15, face="bold", color="blue")) +
theme(axis.title.x = element_text(size= 14, face="bold", color="black")) +
theme(axis.title.y = element_text(size= 14, face="bold", color="black")) +
theme(axis.text.x = element_text(size= 12, color="black")) +
theme(axis.text.y = element_text(size= 12, color="black")) +
annotate("text", x = 2013, y = 460, colour="blue", label="Streams opened") +
annotate("text", x = 2017.5, y = 420, colour="black", label="Dam") +
annotate("segment", x=2013, y= 390, xend = 2013, yend = 440, color="blue",
arrow=arrow()) +
annotate("segment", x=2017.15, y= 360, xend = 2017.3, yend = 400,
color="black", arrow=arrow())
Removed_dams
Opened.stream.length
DRSOBY <- left_join(
Removed_dams, Opened.stream.length, by="DamRemoval") %>%
rename(Year = DamRemoval)
DRSOBY
# Graph.
library(grid)
max_ratio <- max(DRSOBY$Opened.stream.length)/max(DRSOBY$removed_dams); max_ratio
ggplot(DRSOBY, aes(x=Year)) +
geom_bar(aes(y=Opened.stream.length), fill="skyblue", stat="identity") +
geom_point(aes(y=removed_dams*max_ratio),
shape=22, size=5, color="black", bg="grey", stroke=3) +
theme_minimal() +
scale_x_continuous(breaks=c(2012:2019)) +
scale_y_continuous(sec.axis=sec_axis(~./max_ratio,
name="Number of Dams removed",
breaks=c(1:10))) +
labs(title="Streams opened following Dams removed by Year",
x= "Year(2012-2019)", y="Streams opened(Km)") +
theme(title = element_text(size= 15, face="bold", color="blue")) +
theme(axis.title.x = element_text(size= 14, face="bold", color="black")) +
theme(axis.title.y = element_text(size= 14, face="bold", color="black")) +
theme(axis.text.x = element_text(size= 12, color="black")) +
theme(axis.text.y = element_text(size= 12, color="black")) +
annotate("text", x = 2013, y = 460, colour="blue", label="Streams opened") +
annotate("text", x = 2017.5, y = 420, colour="black", label="Dam") +
annotate("segment", x=2013, y= 390, xend = 2013, yend = 440, color="blue",
arrow=arrow()) +
annotate("segment", x=2017.15, y= 360, xend = 2017.3, yend = 400,
color="black", arrow=arrow())
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
Long_stream <- streams %>% as_tibble() %>%
subset(select=c(OBJECTID_1, GNIS_Name)) %>% mutate(Length=st_length(streams)) %>%
arrange(desc(Length))
Long_stream[c(1:5),]
glimpse(streams)
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
Long_stream <- streams %>% as_tibble() %>%
subset(select=c(OBJECTID_1, GNIS_Name)) %>% mutate(Length=st_length(streams)) %>%
arrange(desc(Length))
Long_stream[c(1:5),]
counties %>% sf::st_crs() == dams %>% sf::st_crs()
counties %>% sf::st_crs() == streams %>% sf::st_crs()
dams %>% sf::st_crs() == streams %>% sf::st_crs()
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
GREAT_Total.length.stream.county
streams_by_county
counties %>% sf::st_crs() == dams %>% sf::st_crs()
counties %>% sf::st_crs() == streams %>% sf::st_crs()
dams %>% sf::st_crs() == streams %>% sf::st_crs()
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
write.csv(streams_by_county, file="123")
write.csv(streams_by_county, file="123.csv")
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county))
write.csv(GREAT_Total.length.stream.county, file="1234.csv")
GREAT_Total.length.stream.county
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county
counties %>% sf::st_crs() == dams %>% sf::st_crs()
counties %>% sf::st_crs() == streams %>% sf::st_crs()
dams %>% sf::st_crs() == streams %>% sf::st_crs()
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
bmps_1 <- bmps %>% mutate(., Unique.county = stringr::str_sub(GeographyName, 1, 5)) %>%
subset(select=c(Unique.county, Cost)) %>% group_by(Unique.county) %>%
summarise(Total_Cost = sum(Cost, na.rm=T))
counties_1 <- counties %>% mutate(., Unique.county = GEOID10) %>%
subset(select=Unique.county)
counties.bmps.join <- left_join(counties_1, bmps_1, by="Unique.county")
counties.bmps.join[is.na(counties.bmps.join)] <- 0
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost", n=8)
bmps_1 <- bmps %>% mutate(., Unique.county = stringr::str_sub(GeographyName, 1, 5)) %>%
subset(select=c(Unique.county, Cost)) %>% group_by(Unique.county) %>%
summarise(Total_Cost = sum(Cost, na.rm=T))
counties_1 <- counties %>% mutate(., Unique.county = GEOID10) %>%
subset(select=Unique.county)
counties.bmps.join <- left_join(counties_1, bmps_1, by="Unique.county")
counties.bmps.join[is.na(counties.bmps.join)] <- 0
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost", n=8)
bmps_1 <- bmps %>% mutate(., Unique.county = stringr::str_sub(GeographyName, 1, 5)) %>%
subset(select=c(Unique.county, Cost)) %>% group_by(Unique.county) %>%
summarise(Total_Cost = sum(Cost, na.rm=T))
counties_1 <- counties %>% mutate(., Unique.county = GEOID10) %>%
subset(select=Unique.county)
counties.bmps.join <- left_join(counties_1, bmps_1, by="Unique.county")
counties.bmps.join[is.na(counties.bmps.join)] <- 0
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost", n=6)
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost")
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost", n=8)
dams.stream.matrix <- sf::st_distance(dams, streams)
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
rownames(closest.streams.from.dams) <- dams$OBJECTID_1
print(closest.streams.from.dams, quote = F)
dams.stream.matrix <- sf::st_distance(dams, streams)
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
dams.stream.matrix
dams.stream.matrix
rm(list=ls())
library(tidyverse)
library(GISTools)
library(sf)
library(tmap)
library(dplyr)
library(cdlTools)
counties <- sf::read_sf("./data/CBW/County_Boundaries.shp") %>%
sf::st_make_valid()
dams <- sf::read_sf("./data/CBW/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>%
sf::st_make_valid()
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
bmps <- read_csv("./data/CBW/BMPreport2016_landbmps.csv")
dams.stream.matrix <- sf::st_distance(dams, streams)
dams.stream.matrix
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
dams.stream.matrix
dams.stream.matrix
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
closest.streams.from.dams
rownames(dams.stream.matrix)
colnames(dams.stream.matrix)
dams.stream.matrix
dams.stream.matrix
rm(list=ls())
library(tidyverse)
library(GISTools)
library(sf)
library(tmap)
library(dplyr)
library(cdlTools)
counties <- sf::read_sf("./data/CBW/County_Boundaries.shp") %>%
sf::st_make_valid()
dams <- sf::read_sf("./data/CBW/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>%
sf::st_make_valid()
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
bmps <- read_csv("./data/CBW/BMPreport2016_landbmps.csv")
dams.stream.matrix <- sf::st_distance(dams, streams)
dams.stream.matrix
View(dams.stream.matrix)
closest.streams.from.dams <-
sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])})
closest.streams.from.dams
View(closest.streams.from.dams)
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
closest.streams.from.dams
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
rownames(closest.streams.from.dams) <- dams$OBJECTID_1
dams.stream.matrix <- sf::st_distance(dams, streams)
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
rownames(closest.streams.from.dams) <- dams$OBJECTID_1
dams.stream.matrix <- sf::st_distance(dams, streams)
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
rownames(closest.streams.from.dams) <- dams$OBJECTID_1
print(closest.streams.from.dams, quote = F)
States.and.dam <- st_join(counties, dams, join = st_intersects) %>%
mutate(STATE=fips(STATEFP10, to='abbreviation'))
State.having.dams.incl.zero <-
with(States.and.dam, aggregate(OBJECTID_1, by=list(STATE),
n_distinct, na.rm=TRUE))
colnames(State.having.dams.incl.zero) <- c("STATE", "Number_of_dams")
State.having.dams.incl.zero
#or
# (Aspatial)
State.counties <- counties %>% as_tibble() %>%
dplyr::select(-geometry) %>%
subset(select=c(OBJECTID, STATEFP10)) %>%
mutate(STATE=fips(STATEFP10, to='abbreviation'))
State.having.dams <- left_join(State.counties, dams, by="STATE")
State.having.dams.incl.zero <-
with(State.having.dams, aggregate(OBJECTID_1, by=list(STATE),
n_distinct, na.rm=TRUE))
colnames(State.having.dams.incl.zero) <- c("STATE", "Number_of_dams")
State.having.dams.incl.zero
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
counties %>% sf::st_crs() == dams %>% sf::st_crs()
counties %>% sf::st_crs() == streams %>% sf::st_crs()
dams %>% sf::st_crs() == streams %>% sf::st_crs()
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
rm(list=ls())
library(tidyverse)
library(GISTools)
library(sf)
library(tmap)
library(dplyr)
library(cdlTools)
counties <- sf::read_sf("./data/CBW/County_Boundaries.shp") %>%
sf::st_make_valid()
dams <- sf::read_sf("./data/CBW/Dam_or_Other_Blockage_Removed_2012_2017.shp") %>%
sf::st_make_valid()
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
bmps <- read_csv("./data/CBW/BMPreport2016_landbmps.csv")
options(scipen=999)
with(bmps, aggregate(x=Cost, by=list(StateAbbreviation),
summary, na.rm=TRUE))
# or
with(bmps, tapply(Cost, StateAbbreviation, summary, na.rm=TRUE))
bmps %>% dplyr::filter(Unit == "Acres") %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point()    # Very skewed, need to subset the data
# check it w/ another graph type
bmps %>% dplyr::filter(Unit == "Acres") %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_boxplot(aes(fill=StateAbbreviation))
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 0.1 & Cost < 2000) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point() +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
# by colored STATE
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 0.1 & Cost < 2000) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_point(aes(color=StateAbbreviation)) +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
bmps %>% dplyr::filter(Unit == "Acres",
TotalAmountCredited > 1 & TotalAmountCredited < 100,
Cost > 1 & Cost < 6500) %>%
ggplot(., aes(x=TotalAmountCredited, y=Cost)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(title="Cost vs.TotalAmountCredited only for Unit of type_Acres")
bmps %>%
dplyr::filter("covercrop"==stringr::str_sub(BMPShortName, 1, 9)) %>%
ggplot(aes(x=StateAbbreviation, y=TotalAmountCredited)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(x = "STATE", fill="STATE")
bmps %>%
dplyr::filter("covercrop"==stringr::str_sub(BMPShortName, 1, 9) &
(TotalAmountCredited > 1 &
TotalAmountCredited < 100)) %>%
ggplot(aes(x=StateAbbreviation, y=TotalAmountCredited)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(x = "STATE", fill="STATE",
title="TotalAmountCredited only for cover crop BMPs by STATE")
bmps %>%
dplyr::filter("covercrop"==stringr::str_sub(BMPShortName, 1, 9) &
(TotalAmountCredited > 1 &
TotalAmountCredited < 100))
bmps %>%
dplyr::filter("covercrop"==stringr::str_sub(BMPShortName, 1, 9) &
(TotalAmountCredited > 1 &
TotalAmountCredited < 100)) %>%
ggplot(aes(x=StateAbbreviation, y=TotalAmountCredited)) +
geom_boxplot(aes(fill=StateAbbreviation)) +
labs(x = "STATE", fill="STATE",
title="TotalAmountCredited only for cover crop BMPs by STATE")
dams %>% dplyr::filter(YEAR != 0) %>%
ggplot(., aes(x=YEAR, y=STATE)) + geom_point(size=3) +
labs(title="Dams built by YEAR")
dams
Removed_dams <-  dams %>% as_tibble() %>%
dplyr::select(-geometry) %>%
group_by(DamRemoval) %>%
summarise(removed_dams = n()) %>%
rbind(c(2018, 0), c(2019,0))  # Assuming that there will be no dams removed in 2018, 2019
Opened.stream.length <- streams %>% as_tibble() %>%
dplyr::select(-geometry) %>%
group_by(DamRemoval) %>%
summarise(Opened.stream.length = sum(LengthKM))
# Join two datasets.
DRSOBY <- left_join(
Removed_dams, Opened.stream.length, by="DamRemoval") %>%
rename(Year = DamRemoval)
# Graph.
library(grid)
max_ratio <- max(DRSOBY$Opened.stream.length)/max(DRSOBY$removed_dams); max_ratio
ggplot(DRSOBY, aes(x=Year)) +
geom_bar(aes(y=Opened.stream.length), fill="skyblue", stat="identity") +
geom_point(aes(y=removed_dams*max_ratio),
shape=22, size=5, color="black", bg="grey", stroke=3) +
theme_minimal() +
scale_x_continuous(breaks=c(2012:2019)) +
scale_y_continuous(sec.axis=sec_axis(~./max_ratio,
name="Number of Dams removed",
breaks=c(1:10))) +
labs(title="Streams opened following Dams removed by Year",
x= "Year(2012-2019)", y="Streams opened(Km)") +
theme(title = element_text(size= 15, face="bold", color="blue")) +
theme(axis.title.x = element_text(size= 14, face="bold", color="black")) +
theme(axis.title.y = element_text(size= 14, face="bold", color="black")) +
theme(axis.text.x = element_text(size= 12, color="black")) +
theme(axis.text.y = element_text(size= 12, color="black")) +
annotate("text", x = 2013, y = 460, colour="blue", label="Streams opened") +
annotate("text", x = 2017.5, y = 420, colour="black", label="Dam") +
annotate("segment", x=2013, y= 390, xend = 2013, yend = 440, color="blue",
arrow=arrow()) +
annotate("segment", x=2017.15, y= 360, xend = 2017.3, yend = 400,
color="black", arrow=arrow())
streams <- sf::read_sf("./data/CBW/Streams_Opened_by_Dam_Removal_2012_2017.shp") %>%
sf::st_make_valid()
Long_stream <- streams %>% as_tibble() %>%
subset(select=c(OBJECTID_1, GNIS_Name)) %>% mutate(Length=st_length(streams)) %>%
arrange(desc(Length))
Long_stream[c(1:5),]
streams_by_county <- sf::st_intersection(streams, counties)
GREAT_Total.length.stream.county <- streams_by_county %>% as_tibble() %>%
subset(select=c(GEOID10, NAME10)) %>%
mutate(Length.in.county=st_length(streams_by_county)) %>%
group_by(GEOID10, NAME10) %>% summarise(Total_length=sum(Length.in.county)) %>%
arrange(desc(Total_length)) %>% rename(county=NAME10)
GREAT_Total.length.stream.county[c(1:3),c("county", "Total_length")]
bmps_1 <- bmps %>% mutate(., Unique.county = stringr::str_sub(GeographyName, 1, 5)) %>%
subset(select=c(Unique.county, Cost)) %>% group_by(Unique.county) %>%
summarise(Total_Cost = sum(Cost, na.rm=T))
counties_1 <- counties %>% mutate(., Unique.county = GEOID10) %>%
subset(select=Unique.county)
counties.bmps.join <- left_join(counties_1, bmps_1, by="Unique.county")
counties.bmps.join[is.na(counties.bmps.join)] <- 0
tm_shape(counties.bmps.join) + tm_borders() +
tm_shape(counties.bmps.join) + tm_polygons(col="Total_Cost", n=8)
dams.stream.matrix <- sf::st_distance(dams, streams)
rownames(dams.stream.matrix) <- dams$DAM_NAME
colnames(dams.stream.matrix) <- streams$OBJECTID_1
closest.streams.from.dams <-
t(sapply(seq(nrow(dams.stream.matrix)),
function(i) {j <- which.min(dams.stream.matrix[i,])
c(paste(rownames(dams.stream.matrix)[i], colnames(dams.stream.matrix)[j], sep=' - '),
dams.stream.matrix[i,j])}))
colnames(closest.streams.from.dams) <- c("DAM - CLOSEST STREAM OBJECTID_1", "DIST(m)")
rownames(closest.streams.from.dams) <- dams$OBJECTID_1
print(closest.streams.from.dams, quote = F)
States.and.dam <- st_join(counties, dams, join = st_intersects) %>%
mutate(STATE=fips(STATEFP10, to='abbreviation'))
State.having.dams.incl.zero <-
with(States.and.dam, aggregate(OBJECTID_1, by=list(STATE),
n_distinct, na.rm=TRUE))
colnames(State.having.dams.incl.zero) <- c("STATE", "Number_of_dams")
State.having.dams.incl.zero
State.counties <- counties %>% as_tibble() %>%
dplyr::select(-geometry) %>%
subset(select=c(OBJECTID, STATEFP10)) %>%
mutate(STATE=fips(STATEFP10, to='abbreviation'))
State.having.dams <- left_join(State.counties, dams, by="STATE")
State.having.dams.incl.zero <-
with(State.having.dams, aggregate(OBJECTID_1, by=list(STATE),
n_distinct, na.rm=TRUE))
colnames(State.having.dams.incl.zero) <- c("STATE", "Number_of_dams")
State.having.dams.incl.zero
